name: Release

permissions:
  contents: write
  
on:
  push:
    branches:
      - main
    paths:
      - 'Froola/Froola.csproj'

jobs:
  build-and-release:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Get version from csproj
        id: get_version
        shell: pwsh
        run: |
          # Find the first .csproj file
          $csproj = Get-ChildItem -Path ./Froola -Filter *.csproj | Select-Object -First 1
          if (-not $csproj) {
            Write-Error "No .csproj file found in ./Froola"
            exit 1
          }
          [xml]$xml = Get-Content $csproj.FullName
          $version = $xml.Project.PropertyGroup.Version
          if ([string]::IsNullOrEmpty($version)) {
            Write-Error "Version is missing in csproj"
            exit 1
          }
          echo "version=$version" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Check if tag exists
        id: tag_exists
        shell: pwsh
        run: |
          git fetch --tags
          $tag = "v${{ steps.get_version.outputs.version }}"
          $found = git tag --list $tag
          if ($found) {
            echo "exists=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
            echo "exists=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }

      - name: Publish
        if: steps.tag_exists.outputs.exists == 'false'
        run: dotnet publish ./Froola/Froola.csproj -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -o publish

      - name: Generate appsettings.json
        if: steps.tag_exists.outputs.exists == 'false'
        run: .\publish\Froola.exe init-config -o .\publish

      - name: Zip release files
        if: steps.tag_exists.outputs.exists == 'false'
        run: |
          cd publish
          Compress-Archive -Path Froola.exe,appsettings.json -DestinationPath ../Froola_${{ steps.get_version.outputs.version }}_win-x64.zip

      - name: Create Tag
        if: steps.tag_exists.outputs.exists == 'false'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag v${{ steps.get_version.outputs.version }}
          git push origin v${{ steps.get_version.outputs.version }}

      - name: Get previous tag
        id: prev_tag
        shell: pwsh
        run: |
          git fetch --tags
          # Get tag list as array to count correctly
          $tags = git tag --sort=-creatordate | Where-Object { $_ -ne "" }
          $tagList = $tags -split "`n"
          if ($tagList.Count -le 1) {
            Write-Warning "Only one or no tag exists. No previous tag will be set."
            $prev = ""
          } else {
            try {
              $prev = git describe --tags --abbrev=0 HEAD^
            } catch {
              Write-Warning "Failed to get previous tag using HEAD^, setting previous tag to empty."
              $prev = ""
            }
          }
          echo "tag=$prev" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Generate changelog from PR titles
        id: changelog
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $prev = '${{ steps.prev_tag.outputs.tag }}'
          $curr = 'v${{ steps.get_version.outputs.version }}'
          # If there is no previous tag, get all merged PRs to main
          if ([string]::IsNullOrEmpty($prev)) {
            gh pr list --state merged --base main --json title,number --jq ".[] | \"- #\(.number) \(.title)\"" > pr_titles.txt
          } else {
            # If there is a previous tag, get merged PRs since previous tag
            $since = git log $prev..HEAD --pretty=format:'%H' | Sort-Object | Select-Object -First 1
            gh pr list --state merged --base main --search "+merged:>=$since" --json title,number --jq ".[] | \"- #\(.number) \(.title)\"" > pr_titles.txt
          }
          # Read PR titles if file exists, otherwise set changelog to empty
          if (Test-Path pr_titles.txt) {
            $changelog = Get-Content pr_titles.txt | Out-String
          } else {
            Write-Warning "No PR titles file found. Setting changelog to empty."
            $changelog = ""
          }
          echo "log<<EOF" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo $changelog | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          echo "EOF" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: Create GitHub Release
        if: steps.tag_exists.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: v${{ steps.get_version.outputs.version }}
          body: |
            This is an automatically generated release.
            Version: ${{ steps.get_version.outputs.version }}
            
            ## Changes
            ${{ steps.changelog.outputs.log }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Release Asset
        if: steps.tag_exists.outputs.exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          name: Froola_${{ steps.get_version.outputs.version }}_win-x64.zip
          asset_path: Froola_${{ steps.get_version.outputs.version }}_win-x64.zip
          asset_name: Froola_${{ steps.get_version.outputs.version }}_win-x64.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
